'''
Mixin混合设计模式：
    继承需要一个必须前提，继承应该是is-a关系
    如：
        苹果可以继承水果，因为苹果是水果
        苹果不能继承午饭
    创建一个交通工具类，让属于交通工具的都来继承（汽车，飞机，直升机）
    但是飞机有飞行功能，汽车没有。在交通工具类中定义就不合适
    解决：
        飞机和直升机中分别实现，会出现代码无法重用
        单独定义交通工具类，如飞行器类和交通工具类两个类，但是会出现多重继承关系，违背了is-a原则
    怎么办：
        java中可以通过interface接口类实现多重继承
        python中本事支持多继承
混合类：
    不是用来实例化对象的
    是用来继承的
'''
#定义一个交通工具类
class vehicle():
    #运输货物
    def huo(self):
        print('可以拉货')

    def ren(self):
        print('可以拉人')

'''
定义一个飞行器的类,让需要飞的交通工具来继承。可以解决问题，但是这个类容易被人误解
出现了类多继承，违背了is-a原则
解决方案： 也是使用多继承，但是给飞行器这个类，定义成Mixin混合类
此时就是将飞行器这个类作为了一个扩展功能，来扩展其他类。
'''
class FlyMixin():
    def fly(self):
        print('可以起飞')


#定义一个汽车类
class Car(vehicle):
    pass

#定义一个飞机类
class airplan(vehicle,FlyMixin):
    pass

#定义一个直升机
class zhishengji(vehicle,FlyMixin):
    pass

'''
虽然飞机类和直升机类都进行了多继承FlyMixin
但是由于FlyMixin类加了Mixin这个名，告诉别人这个类是一个混入类
Mixin表示混入（mix-in）
    Mixin 必须是表示一种功能，而不是一个对象
    Mixin 的功能是单一的，如果有多个功能，那就定义多个Mixin类
    python中的Mixin类通过多继承实现
    Mixin这个类通常不单独使用，而是混合其他类一起使用，增加功能
    Mixin 类依赖子类实现，即使子类没有继承这个mixin类子类亦可以正常运行，只是缺少一个功能而已
使用Mixin混合类优点：
    在不对其他类内容修改前提下，扩展类的功能
    提高了代码重用性，是的代码接个欧更加清晰
    可以根据开发需求任意调整功能（创建新的Mixin混入类）
    避免设计多层次的复杂继承关系
'''
