'''
装饰器：
    不改变原有的函数代码，且不改变原有调用方法，给原代码增加新功能
    用一个函数或类去装饰旧函数或类，造出一个新函数或类
语法：
    在原有的函数上加上@符号，装饰器会把下边的函数当做参数传递给装饰器
    @有叫做语法糖
应用场景：
    引入日志，函数执行时间统计，执行函数前后准备工作，权限校验，缓存

装饰器原型:
    利用闭包把函数当做参数传递，并在函数中调用传递进来的函数，做后返回一个函数
'''
# #定义一个普通函数
# def old():
#     print('一个普通函数')
#
# #定义一个闭包函数，定义一个外函数接收一个参数，定义一个内函数，并在内函数中调用外函数的参数。
# def outer(f):
#     def inner():
#         print('一个外函中的内函数1')
#         f()
#         print('一个外函中的内函数2')
#     return inner
#
# #old()   #直接调用普通函数
# old = outer(old)   #outer返回了inner赋给old函数
# old()   #此时就相当于调用inner

#装饰器实现
def outer(f):
    def inner():
        print('一个外函中的内函数1')
        f()
        print('一个外函中的内函数2')
    return inner

@outer   #使用outer装饰器，在不影响old函数情况下，新增功能
def old():
    print('一个普通函数')

old()
'''
使用装饰器后的函数调用后就相当于：   
    old = outer(old)   将普通函数作为参数传入闭包函数，接结果又赋值给普通函数
    old()   
'''